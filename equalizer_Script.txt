
<!DOCTYPE html>
<html lang="en-us"><head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width">
	<title>Sound-Oszi</title>	
	<style>
		h1 { margin:0 }
		figure { margin: 5px auto }
		.mute { position: fixed; top:.2em;right:.2em;padding:.2em }
		#visualizer_t, #visualizer_f { width:95vw; height:45vh; }
	</style>
</head>
<body>
    
	<header>
		<h1>Sound-Oszi</h1>
	</header>

	<main>
		<figure id="visualizer_t"></figure> 
		<figure id="visualizer_f"></figure> 

		<button type="button" class="mute">Mute</button>
	</main>
		
<script>
var JB = window.JB || {};

// Das Grafikobjekt
JB.grafik = function(grafikelement) {
	this.method = "canvas";
	// Canvas in Größe des "grafikelement" anlegen
	if(typeof grafikelement == "string") grafikelement = document.getElementById(grafikelement);
	this.w = grafikelement.offsetWidth;
	this.h = grafikelement.offsetHeight;
	var cv = document.createElement("canvas");
	cv.width = this.w;
	cv.height = this.h;
	cv.style.position = "absolute";
	grafikelement.appendChild(cv);
	var context = cv.getContext("2d"); 
	context.lineWidth = 1;
	context.globalAlpha = 1.0;
	
	// Linienstärke setzen
	this.setwidth = function(width) {
		context.lineWidth = width;
	} // setwidth
	
	// Punkt bei x,y, in Farbe c
	this.punkt = function(x,y,c) {
		context.fillStyle = c;
		context.fillRect(x-(context.lineWidth-1)/2,this.h-y+(context.lineWidth-1)/2,context.lineWidth,context.lineWidth);
	} // punkt

	// Linie von (xs,ys) nach (xe,ye) in Farbe color zeichnen
	this.line = function(xs,ys,xe,ye,color) {
		context.strokeStyle = color;
		context.beginPath();
		context.moveTo(Math.round(xs),Math.round(this.h-ys));
		context.lineTo(Math.round(xe),Math.round(this.h-ye));
		context.stroke();
	} // line

	// Polylinie mit den Werten in points in Farbe color zeichnen
	this.polyline = function(points,color) { 
		context.strokeStyle = color;
		context.beginPath();
		context.moveTo(Math.round(points[0].x),this.h-Math.round(points[0].y));
		for(var i=1,l=points.length;i<l;i++) 
			context.lineTo(Math.round(points[i].x),this.h-Math.round(points[i].y));
		context.stroke();
	} // polyline

	// Polylinie mit den Werten in points zeichnen
	// Die von der Polylinie umschlossene Fläche wird in Farbe color mit Alphawert alpha eingefärbt
	this.polyfill = function(points,color,alpha) { 
		context.fillStyle = color;
		context.globalAlpha = alpha;
		context.beginPath();
		context.moveTo(Math.round(points[0].x),this.h-Math.round(points[0].y));
		for(var i=1,l=points.length;i<l;i++) 
			context.lineTo(Math.round(points[i].x),this.h-Math.round(points[i].y));
		context.fill();
		context.globalAlpha = 1.0;
	} // polyfill
	
	// Text an (x,y) ausgeben
	// size: Schriftgröße
	// text: Text
	// align: Bezug für (x,y), zwei Buchstaben, z.B. lu für links unten, s. case
	// diretion: Textrichtung: v für vertikal, sonst horizontal
	this.text = function(x,y,size,color,text,align,direction) {
		var align_h = "m";
		var align_v = "m";
		if(align && align.length) {
			align_h = align.substr(0,1);
			if(align.length>1) align_v = align.substr(1,1);
		}
		context.save();
		context.translate(x,this.h-y);
		if(direction && direction=="v") 
			context.rotate(1.5*Math.PI);
		switch(align_h) {
			case "l": context.textAlign = "start"; break;
			case "m": context.textAlign = "center"; break;
			case "r": context.textAlign = "end"; break;
			default:  context.textAlign = "center"; break;
		}
		switch(align_v) {
			case "o": context.textBaseline = "top" ; break;
			case "m": context.textBaseline = "middle" ; break;
			case "u": context.textBaseline = "bottom" ; break;
			default:  context.textBaseline = "middle" ; break;
		}
		context.font = size + " sans-serif";
		context.fillStyle = color;
		context.fillText(text,0,0);
		context.restore();
	} // text

	// Canvas löschen
	this.del = function() {
		context.clearRect(0, 0, this.w, this.h);
	} // del
	
	// Textbreite ermiteln
	this.getTextWidth = function(text,size) {
		context.font = size+" sans-serif";
		return context.measureText(text).width;
	} // getTextWidth

} // grafik

// Math.log10 wird noch nicht von allen Browsern unterstützt
if(!Math.log10) Math.log10 = function(x) { return Math.log(x)/Math.LN10; };

// Das Plotobjekt
// feld ist das Objekt bzw. dessen Id, in dem das Diagramm erstellt werden soll
// xstr und ystr geben die Bezeichner der Objektelemente mit den x- und y-Werten im Datenarray an.
// Defaultwerte sind x und y. Das Datenarray sieht dan so aus: [{x:xwert,y:ywert}{...},...]
JB.plot = function(feld,xstr,ystr) {
	// Defaultwerte
	this.ticwidth = 1;
	this.linewidth = 1;
	this.borderwidth = 2;
	this.framecol = "black";
	this.gridcol = "gray";
	this.labelcol = "black";
	this.markercol = "black";
	this.fillopac = 0.1;
	this.xscale60 = false;
	
	// Plotbereich anlegen
	if(typeof feld == "string") feld = document.getElementById(feld);
	feld.innerHTML = "";

	// Einige Variablen
	var xobj = xstr?xstr:"x";
	var yobj = ystr?ystr:"y";
	var xmin=0,xmax=0,ymin=0,ymax=0;
	var xfak=0,yfak=0;
	var dx,dy,fx,fy;
	var gr = null;
	var marker;

	// Zu den Werten in daten xmin, xmax, ymin und ymax ermiteln
	this.scale = function(daten) {
		if(xmin==xmax) { // Startwerte beim ersten Datensatz
			xmax = xmin = daten[0][xobj];
			ymax = ymin = daten[0][yobj];
		}
		for(var i=1;i<daten.length;i++) {
			var t = daten[i];
			if(t[xobj]<xmin) xmin = t[xobj];
			if(t[xobj]>xmax) xmax = t[xobj];
			if(t[yobj]<ymin) ymin = t[yobj];
			if(t[yobj]>ymax) ymax = t[yobj];
		}
	} // scale
	
	// Plotbereich leeren
	this.clear = function() {
		feld.innerHTML = "";
		xmax = xmin = ymax = ymin = xfak = yfak = 0;
	} // clear

	// Achsenkreuz, Tics und Beschriftung, linke untere Ecke bei (x0,y0)
	// xtext und ytext sind die Beschriftungen der Achsen
	this.frame = function(x0,y0,xtext,ytext) {
		this.x0 = x0;
		this.y0 = y0;
		// Den Bereich für das Diagramm anlegen
		feld.innerHTML = "";
		gr = new JB.grafik(feld);
		this.method = gr.method;
		// Elemente für Mouseover, Marker, etc.
		this.ifeld = JB.makediv(feld,"","","",feld.offsetWidth-1,feld.offsetHeight-1);
		var cp = JB.makediv(this.ifeld,"",0,0,10,10);
		// Copyright
		cp.innerHTML = "<a href='http://www.j-berkemeier.de' title='Plot 6. 10. 2016'>X</a>";
		cp.style.zIndex = "100";
		cp.style.opacity = "0";
		// Elemente für Mouseover, Marker, etc.
		this.mele = JB.makediv(this.ifeld,"",x0,0,gr.w-x0,gr.h-y0); 
		// Achsenbeschriftungen
		if(xtext.length) gr.text((gr.w-x0)/2+x0,0,".9em",this.labelcol,xtext,"mu","h"); 
		if(ytext.length) gr.text(10,(gr.h-y0)/2+y0,".9em",this.labelcol,ytext,"mm","v");
		// xmin und xmax auf die nächst kleinere bzw. größere "glatte" Zahl runden und den 
		// Abstand der Tics auf glatte Zahlen (1 2 5 0) für x-Achse legen
		if(xmax==xmin) { xmin -= 0.5; xmax += 0.5; }
		if(this.xscale60) dx = (xmax - xmin)/50;
		else dx = (xmax - xmin)/100;			
		xmin -= dx; xmax += dx;
		dx = xmax - xmin;
		fx = Math.pow(10,Math.floor(Math.log10(dx))-1); // Die Größenordnung ermitteln
		xmin = Math.floor(xmin/fx)*fx;
		xmax = Math.ceil(xmax/fx)*fx;
		xfak = (gr.w-x0)/(xmax-xmin);
		var tx = JB.ticdist(100*dx/gr.w);
		// Tics und Zahlen an der x-Achse
		gr.setwidth(this.ticwidth);
		if(this.xscale60 && tx<.75) {
			var vz;
			     if(tx<0.02) tx = 1/60;
			else if(tx<0.04) tx = 1/30;
			else if(tx<0.1)  tx = 1/12;
			else if(tx<0.2)  tx = 1/6;
			else if(tx<0.4)  tx = 1/3;
			else             tx = 1/2;
			var mxmin = Math.ceil(xmin/tx)*tx;
			for(var x=mxmin;x<=xmax;x+=tx) {
				var xx = (x-xmin)*xfak + x0;
				vz = "";
				if(x>=0) {
					var xh = Math.floor(x);
					var xm = Math.round((x - xh) * 60);
				}
				else {
					var xh = Math.ceil(x);
					var xm = Math.round((xh - x) * 60);
					if(xh==0 && xm!=0) vz = "-";
				}
				if(xm == 60) { xm = 0; xh++; }
				if(xm<10) xm = "0"+xm;
				var xln = vz+xh+"h"+xm+"'";
				gr.line(xx,y0,xx,gr.h,this.gridcol);
				if(xtext.length && xx<(gr.w-5) && xx>5) gr.text(xx,y0-2,".8em",this.labelcol,JB.myround(x,tx),"mo","h");
			}
		}
		else {
			tx = JB.ticdist(tx);
			var mxmin = Math.ceil(xmin/tx)*tx;
			for(var x=mxmin;x<=xmax;x+=tx) {
				var xx = (x-xmin)*xfak + x0;
				gr.line(xx,y0,xx,gr.h,this.gridcol);
				if(xtext.length && xx<(gr.w-5) && xx>5) gr.text(xx,y0-2,".8em",this.labelcol,JB.myround(x,tx),"mo","h");
			}
		}
		// ymin und ymax auf die nächst kleinere bzw. größere "glatte" Zahl runden und den 
		// Abstand der Tics auf glatte Zahlen (1 2 5 0) für x-Achse legen
		if(ymax==ymin) { ymin -= 0.5; ymax += 0.5; }
		dy = (ymax - ymin)/100; 
		ymin -= dy; ymax += dy;
		dy = ymax - ymin;
		fy = Math.pow(10,Math.floor(Math.log10(dy))-1); // Die Größenordnung ermitteln
		ymin = Math.floor(ymin/fy)*fy;
		ymax = Math.ceil(ymax/fy)*fy;
		yfak = (gr.h-y0)/(ymax-ymin);
		var ty = JB.ticdist(gr.h<250 ?  50*dy/gr.h : 100*dy/gr.h);
		var mymin = Math.ceil(ymin/ty)*ty;
		// Tics und Zahlen an der y-Achse
		for(var y=mymin;y<=ymax;y+=ty) {
			var yy = (y-ymin)*yfak + y0;
			gr.line(x0,yy,gr.w,yy,this.gridcol);
			if(ytext.length && yy<(gr.h-5) && yy>5) gr.text(x0-2,yy,".8em",this.labelcol,JB.myround(y,ty),"rm","h");
		}
		gr.setwidth(this.borderwidth);
		gr.polyline([
			{x:x0, y: y0},
			{x:gr.w-this.borderwidth, y:y0},
			{x:gr.w-this.borderwidth, y:gr.h-this.borderwidth},
			{x:x0, y:gr.h-this.borderwidth},
			{x:x0, y:y0}],
			this.framecol);
	} // frame

	// Daten Plotten
	// daten: Datenarray mit Objekten mit den x- und y-Werten
	// color Diagrammfarbe
	this.plot = function(daten,color) {
		var arr=[];
		for(var i=0,l=daten.length;i<l;i++)
			arr.push({x:(daten[i][xobj]-xmin)*xfak+this.x0, y:(daten[i][yobj]-ymin)*yfak+this.y0});
		if(this.fillopac>0) {
			var fillline;
			if(ymax*ymin<=0) fillline = -ymin*yfak+this.y0 ; 
			else if(ymin>0) fillline = 1+this.y0;
			else fillline = gr.h-1;
			arr.push({x:(daten[l-1][xobj]-xmin)*xfak+this.x0,y:fillline});
			arr.push({x:(daten[0][xobj]-xmin)*xfak+this.x0,y:fillline});
			arr.push({x:(daten[0][xobj]-xmin)*xfak+this.x0,y:(daten[0][yobj]-ymin)*yfak+this.y0});
			gr.polyfill(arr,color,this.fillopac);
			arr.length -= 3;
		}
		gr.setwidth(this.linewidth);
		gr.polyline(arr,color);
	} // plot
} // plot

// Hilfsfunktion zum berechnen des Abstands der Achsen-Tics, Abstände auf 1 2 5 0 gerundet
JB.ticdist = function(td) { 
	var td10 = Math.pow(10,Math.floor(Math.log10(td)));
	td = Math.round(td/td10);
	td = Number(String(td).replace(/3/,"2").replace(/[4567]/,"5").replace(/[89]/,"10"));
	td *= td10;
	return td;
} // ticdist
	
// Hilfsfunktionen zum Runden
JB.myround = function(z,d) { 
	var l10 = Math.floor(Math.log10(d));
	var f = Math.pow(10,l10); 
	var zz = Math.round(z/f)*f;
	var zzz = Number(zz.toPrecision(15)).toString(10);
	return zzz; 
}
	
// Hilfsfunktion zum Erstellen eines divs
JB.makediv = function(parentnode,id,x,y,w,h) {
	var ele = document.createElement("div");
	ele.style.position = "absolute";
	if(typeof id == "string" && id.length) ele.id = id;
	if(typeof x == "number") ele.style.left = x + "px";
	if(typeof y == "number") ele.style.top = y + "px";
	if(typeof w == "number") ele.style.width = w + "px";
	if(typeof h == "number") ele.style.height = h + "px";
	parentnode.appendChild(ele);
	return ele;
} // makediv

// ------------------------------- Ab hier Audio-API -------------------------------------------

// set up forked web audio context, for multiple browsers
// window. is needed otherwise Safari explodes

if (window.AudioContext) var audioCtx = new window.AudioContext();
else if (window.webkitAudioContext) var audioCtx = window.webkitAudioContext();

if (audioCtx) {

	var source;
	var stream;

	var sampleRate = audioCtx.sampleRate;
	console.log("Sample Rate: "+sampleRate);

	// grab the mute button to use below

	var mute = document.querySelector('.mute');

	//set up the audio nodes we will use for the app

	var analyser = audioCtx.createAnalyser();
	analyser.minDecibels = -90;
	analyser.maxDecibels = 0;
	analyser.smoothingTimeConstant = 0; //0.85;

	// set up context for plot

	var canvas_t = document.querySelector('#visualizer_t');
	canvas_t.setAttribute('width',canvas_t.offsetWidth);
	canvas_t.setAttribute('height',canvas_t.offsetHeight);
	var plot_t = new JB.plot(canvas_t,"t","ampl");

	var canvas_f = document.querySelector('#visualizer_f');
	canvas_f.setAttribute('width',canvas_f.offsetWidth);
	canvas_f.setAttribute('height',canvas_f.offsetHeight);
	var plot_f = new JB.plot(canvas_f,"f","spekt");

	var drawVisual_t, drawVisual_f;

	//main block for doing the audio recording

	// fork getUserMedia for multiple browser versions, for those
	// that need prefixes

	navigator.getUserMedia = (navigator.getUserMedia ||
														navigator.webkitGetUserMedia ||
														navigator.mozGetUserMedia ||
														navigator.msGetUserMedia);

	if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
		console.log('mediaDevices.getUserMedia supported.');
		navigator.mediaDevices.getUserMedia (
			// constraints - only audio needed for this app
			{
				audio: true
			})
			// Success callback
			.then(function(stream) {
				source = audioCtx.createMediaStreamSource(stream);
				source.connect(analyser);
				visualize();
			})
			// Error callback
			.catch(function(err) {
				console.log('The following gUM error occured: ' + err);
			});
	} 
	else if (navigator.getUserMedia) {
		 console.log('getUserMedia supported.');
		 navigator.getUserMedia (
			// constraints - only audio needed for this app
			{
				audio: true
			},
			// Success callback
			function(stream) {
				source = audioCtx.createMediaStreamSource(stream);
				source.connect(analyser);
				visualize();
			},
			// Error callback
			function(err) {
				console.log('The following gUM error occured: ' + err);
			}
		);
	}
	else {
		console.log('getUserMedia not supported on your browser!');
		alert('Z.Zt. werden nur Firefox, Chrome und Edge unterstützt.');
	}

	function visualize() {

	console.log("visualize");	

		analyser.fftSize = 2048;
		var bufferLength_t = analyser.fftSize;
		var dataArray_t = new Uint8Array(bufferLength_t);
		console.log("Zeitwerte",bufferLength_t,dataArray_t.length);

		var t_werte = [];

		var t_scale = [{t:0,ampl:-1},{t:bufferLength_t/sampleRate,ampl:1}];

		for(var i=0;i<bufferLength_t;i++) t_werte[i] = { t: i/sampleRate, ampl: 0 } ;
		
		function draw_t() {

			drawVisual_t = requestAnimationFrame(draw_t);

			analyser.getByteTimeDomainData(dataArray_t);
			
			for(var i = 0; i < bufferLength_t; i++) t_werte[i].ampl = dataArray_t[i]/128.0-1;
			
			plot_t.clear();
			plot_t.scale(t_scale);
			plot_t.frame(50,30,"Zeit","Amplitude");
			plot_t.plot(t_werte,"#000");

		};

		draw_t();


		analyser.fftSize = 2048;
		var bufferLength_f = analyser.frequencyBinCount;
		var dataArray_f = new Uint8Array(bufferLength_f);
		console.log("Spektralwerte",bufferLength_f,dataArray_f.length);

		var f_werte = [];
	// Es wird nur die 1. Hälfte des Spektrums gezeigt.
		var f_scale = [{f:0,spekt:0},{f:.25*sampleRate,spekt:1}];

		for(var i=0;i<bufferLength_f/2;i++) f_werte[i] = { f: .5*i*sampleRate/bufferLength_f, spekt: 0 } ;

		function draw_f() {
		
			drawVisual_f = requestAnimationFrame(draw_f);

			analyser.getByteFrequencyData(dataArray_f);

			for(var i = 0; i < bufferLength_f/2; i++) f_werte[i].spekt = dataArray_f[i]/256;
			
			plot_f.clear();
			plot_f.scale(f_scale);
			plot_f.frame(50,30,"Frequenz","Amplitude");
			plot_f.plot(f_werte,"#000");

		};

		draw_f();

		mute.onclick = function voiceMute() {
			if(mute.id == "") {
				window.cancelAnimationFrame(drawVisual_t);
				window.cancelAnimationFrame(drawVisual_f);
				mute.id = "activated";
				mute.innerHTML = "Unmute";
			} 
			else {
				draw_t();
				draw_f();
				mute.id = "";    
				mute.innerHTML = "Mute";
			}
		}

	}
	
}
else {
	console.log("AudioContext wird nicht unterstützt");
	alert('Z.Zt. werden nur Firefox, Chrome und Edge unterstützt.');
}

</script>
	
</body>
</html>v